/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"io"
	"net/http"
	"sync"
)

type Album struct {
	AlbumID   string  `json:"albumId"`
	Image     []byte  `json:"-"`
	ImageSize int     `json:"imageSize"`
	Profile   Profile `json:"profile"`
}

type Profile struct {
	Artist string `json:"artist"`
	Title  string `json:"title"`
	Year   string `json:"year"`
}

var albumList = make(map[string]Album)
var profileList = make(map[string]Profile)
var goMutex = &sync.Mutex{}

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	albumId := vars["albumID"]
	//read lock
	goMutex.Lock()
	profile, ok := profileList[albumId]
	goMutex.Unlock()
	if !ok {
		http.Error(w, "Profile not found.", http.StatusBadRequest)
		return
	}
	res, err := json.Marshal(profile)
	if err != nil {
		http.Error(w, "Can not transfer file to json", http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write(res)
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Parse the multipart request
	err := r.ParseMultipartForm(10 << 20) // Max 10 MB file size
	if err != nil {
		http.Error(w, "Cannot parse file in multipart", http.StatusBadRequest)
		return
	}
	file, _, err := r.FormFile("image")
	if err != nil {
		http.Error(w, "Cannot get image", http.StatusBadRequest)
		return
	}
	defer file.Close()

	imageContent := make([]byte, r.ContentLength)
	_, err = file.Read(imageContent)
	if err != nil && err != io.EOF {
		http.Error(w, "Read file failed.", http.StatusBadRequest)
		return
	}
	var profile1 Profile
	profileContent := r.FormValue("profile")
	err = json.Unmarshal([]byte(profileContent), &profile1)
	if err != nil {
		http.Error(w, "Parse profile failed.", http.StatusBadRequest)
		return
	}

	goMutex.Lock()
	albumID := fmt.Sprintf("%d", len(albumList)+1)
	album := Album{
		AlbumID:   albumID,
		Image:     imageContent,
		ImageSize: len(imageContent),
		Profile:   profile1,
	}
	albumList[albumID] = album
	profileList[albumID] = profile1
	goMutex.Unlock()
	response := map[string]interface{}{
		"albumId":   albumID,
		"imageSize": len(imageContent),
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
	//fmt.Fprintf(w, `{"message": "File uploaded successfully"}`)
}
